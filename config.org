* Preface
Welcome to my doom configuration. I hope you find some good snippets to borrow from me.
* Color Theme
#+begin_src elisp
(setq doom-theme 'doom-solarized-light)
#+end_src
* Helpers
Doom provides a lot of helpers out of the box, but here are some of my own. Feel free to tell me if there are any viable alternative built into Doom or Emacs.
#+begin_src elisp
(defun get-string-from (filename)
  "Return the contents of FILENAME."
  (with-temp-buffer
    (insert-file-contents filename)
    (buffer-string)))
#+end_src
* MacOS exclusive configurations
#+begin_src elisp
(when IS-MAC
  (setq mac-option-key-is-meta t)
  (defun olav-open-safari ()
    (interactive)
    (shell-command "open -a Safari.app"))

  (defun olav-open-discord ()
    (interactive)
    (shell-command "open -a Discord.app"))

  (defun olav-open-riot ()
    (interactive)
    (shell-command "open -a Riot.app"))

  (defun olav-open-chrome ()
    (interactive)
    (shell-command "open -a \"Google Chrome\".app"))

  (defun olav-open-chrome ()
    (interactive)
    (shell-command "open -a \"Google Chrome\".app"))

  (defun olav-open-visual-studio-code ()
    (interactive)
    (shell-command "open -a \"Visual Studio Code\".app"))

  (defun olav-open-spotify ()
    (interactive)
    (shell-command "open -a Spotify.app"))

  (defun olav-open-obs ()
    (interactive)
    (shell-command "open -a OBS.app"))

  (defun olav-open-finder ()
    (interactive)
    (shell-command "open -a Finder.app"))

  (defun olav-open-postman ()
    (interactive)
    (shell-command "open -a Postman.app"))

  (defun olav-open-terminal ()
    (interactive)
    (shell-command "open -a Terminal.app"))

  (setq mac-right-option-modifier nil)
  (setq frame-resize-pixelwise t)
  (map! :leader (:prefix ("e" . "open external") :desc "Visual Studio Code" "v" 'olav-open-visual-studio-code))
  (map! :leader (:prefix ("e" . "open external") :desc "Safari" "s" 'olav-open-safari))
  (map! :leader (:prefix ("e" . "open external") :desc "Chrome" "c" 'olav-open-chrome))
  (map! :leader (:prefix ("e" . "open external") :desc "Discord" "d" 'olav-open-discord))
  (map! :leader (:prefix ("e" . "open external") :desc "Riot" "r" 'olav-open-riot))
  (map! :leader (:prefix ("e" . "open external") :desc "Spotify" "m" 'olav-open-spotify))
  (map! :leader (:prefix ("e" . "open external") :desc "OBS" "o" 'olav-open-obs))
  (map! :leader (:prefix ("e" . "open external") :desc "Finder" "f" 'olav-open-finder))
  (map! :leader (:prefix ("e" . "open external") :desc "Postman" "p" 'olav-open-finder))
  (map! :leader (:prefix ("e" . "open external") :desc "Terminal" "t" 'olav-open-terminal))
  )
#+end_src
* Books
#+begin_src elisp
(defun olav-counsel-find-file-extern-directory (directory)
  (interactive)
  (setq temp default-directory)
  (cd directory)
  (call-interactively 'counsel-find-file-extern)
  (setq default-directory temp))

(defun olav-open-book ()
  (interactive)
  (olav-counsel-find-file-extern-directory "~/Desktop/Books"))
(defun olav-open-manga ()
  (interactive)
  (olav-counsel-find-file-extern-directory "~/Desktop/Manga"))

(map! :leader (:prefix ("o" . "open") :desc "Open a book" "b" 'olav-open-book))
(map! :leader (:prefix ("o" . "open") :desc "Open a manga" "m" 'olav-open-manga))
#+end_src
* Personal Information
#+begin_src elisp
(setq user-full-name "Olav Fosse"
      user-mail-address "fosseolav@gmail.com")
#+end_src
* Projectile
I like how doom handles projects out of the box
#+begin_src elisp
(setq projectile-project-search-path '("~/code/"))
#+end_src
Unfortunately adding ~/.doom.d, ~/org and ~/roam to the search path did not work as expected. Therefore I have to add them manually.
* Org
** Better defaults
This makes it possible to use <s to insert a code block
#+begin_src elisp
(require 'org-tempo)
#+end_src
** Roam
#+begin_src elisp
(setq org-roam-graph-viewer 'counsel-find-file-extern)
#+end_src
*** Non-linear notetaking
/The primary purpose of note-taking should not be for storing ideas, but for developing them. When we take notes, we should ask: â€œIn what context do I want to see this note again?/

I use org-roam to take notes in a graph(network). The way it works is that whenever you link to a note from another note an edge(connection) is created between the two. org-roam provides easy between nodes through their edges. This is useful because it allows me to build useful connections between my notes regardless of which topic(s) they belong to. I was inspired by the zettelkasten method although I don't strictly follow it.
#+begin_src elisp
(setq org-roam-directory "~/org/roam")
(setq org-roam-index-file "index.org")
#+end_src
[[file:roam_illustration.svg][An org-roam graph]]
*** Linear notetakin
I also use org-mode for organizing knowledge that is more linear in nature. Among other things I manage todos, project ideas, quotes, reading lists, song lists, my calendar, gift ideas, wishlist and youtube scripts all in org-mode.

In addition to that i track my habits in org using org-habits.
#+begin_src elisp
(require 'org-habit)
#+end_src
** Latex
I use latex for notating inline mathematics equations in my org notes. Unfortunately the previews are quite fuzzy on macOS. I've heard that this problem can be avoided by using emacs-mac, but seeing as it doesn't support Emacs 27 I haven't bothered with it.
#+begin_src emacs-lisp
;(setq org-latex-create-formula-image-program 'dvisvgm)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
* Competitive programming
I do competitive programming in cpp and for that I rely heavily on my snippets. All of them are hand written by me and only intended for my specific competitive programming workflow.
#+begin_src elisp
(set-file-template! 'c++-mode :trigger "template")
(setq yas--default-user-snippets-dir "~/.doom.d/snippets")
#+end_src

I use c++11 for all my competitive programming and that is all I use cpp for so always using c++11 linting is sufficient for me.
#+begin_src elisp
(add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++11")))
#+end_src

I also use these functions for quickly compiling, running and testing cpp programs.
#+begin_src elisp
(defun comp-open-buffer (buffer &optional switch-window)
      (setq temp kill-buffer-query-functions)
      (setq kill-buffer-query-functions nil)
      (+popup/close-all)
      (+popup-buffer buffer)
      (setq kill-buffer-query-functions temp)
      (when switch-window (switch-to-buffer-other-window buffer))
      )

(defun comp-compile () (interactive)
       (setq temp compilation-read-command)
       (setq compilation-read-command nil)
       (comp-open-buffer (compile (concat "g++ \"" buffer-file-name "\" --std=c++11 -o /tmp/comp-a.out")))
       (setq compilation-read-command temp)
       )

(defun comp-run () (interactive)
       (comp-open-buffer (setq buffer (make-comint "comp-run" "/tmp/comp-a.out")) t))

(defun comp-test () (interactive)
       (setq buffer (current-buffer))
       (comp-open-buffer (make-comint "comp-test" "/tmp/comp-a.out") t)
       (setq y (clipboard-yank))
       (insert (if (eq y nil) "" y)
               (comint-send-input nil nil))
       (other-window)
       )

(map! :leader (:prefix ("k" . "competitive") :desc "Comp compile" "c" 'comp-compile))
(map! :leader (:prefix ("k" . "competitive") :desc "Comp run" "r" 'comp-run))
(map! :leader (:prefix ("k" . "competitive") :desc "Comp test" "t" 'comp-test))
#+end_src
* RSS
#+begin_src elisp
(setq elfeed-feeds
      '(;"http://fossegr.im/feed.xml"
        ;"https://www.youtube.com/feeds/videos.xml?channel_id=UCWQ1f0ZhD-qhJB3AfJEoW0w" ; My channel ? (haven't checked)
        "https://protesilaos.com/codelog.xml"
        ;"https://www.distrotube.com/phpbb/app.php/feed"
        ;"https://xkcd.com/atom.xml"
        ;"https://news.ycombinator.com/rss"
        ;"https://www.reddit.com/r/emacs/new.rss"
        ;"https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" ; Luke Smith
        "https://www.kode24.no/?lab_viewport=rss"
        ))
(defun olav-rss ()
  (interactive)
  (elfeed-update)
  (persp-switch "*RSS*")
  (=rss))
(map! :leader (:prefix ("o" . "open") :desc "Open elfeed" "l"  'olav-rss))
#+end_src

* Scratch Perspective
I use a scratch perspective to do tasks that don't fit in the current perspective or any other project. For instance if I am to install a global package when I am in the irc perspective I would switch to the scratch perspective an do it there. This serves as an alternative to pulling up an external terminal.
#+begin_src elisp
(defun olav-scratch ()
  (interactive)
  (if (+workspace-exists-p "*SCRATCH*")
      (persp-switch "*SCRATCH*")
      (progn (persp-switch "*SCRATCH*")
             (switch-to-buffer "*scratch*")))
)

(map! :leader (:prefix ("o" . "open") :desc "Open scratch" "s" 'olav-scratch))
#+end_src

* Radio
[[https://github.com/olav35/radio][Radio]] is a Internet radio player package written by me. Although it is available on GitHub I load it locally as I find it more convenient to work on that way.

#+begin_src elisp
(add-to-list 'load-path "~/code/radio/")
(require 'radio)

(map! :leader (:prefix ("r" . "radio") :desc "Play a radio channel" "p" 'radio-play))
(map! :leader (:prefix ("r" . "radio") :desc "Stop the radio player" "s" 'radio-stop))
#+end_src
* Other
I don't like, or understand for that matter the default behavior of `SPC w m m`. Therefore I rebound it to delete-other-windows which just works.
#+begin_src elisp
(map! :leader (:prefix ("w" . "window") (:prefix ("m" . "maximize") :desc "Actually maximize (as opposed to the default behaviour)" "m" 'delete-other-windows)))
#+end_src
I like relative line numbers
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src
