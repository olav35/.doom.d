* Preface
Welcome to my doom configuration. I hope you find some good snippets to borrow from me.
* Color Theme
#+begin_src elisp
;(setq doom-theme 'doom-theme)
#+end_src
* Helpers
Doom provides a lot of helpers out of the box, but here are some of my own. Feel free to tell me if there are any viable alternative built into Doom or Emacs.
#+begin_src elisp
(defun get-string-from (filename)
  "Return the contents of FILENAME."
  (with-temp-buffer
    (insert-file-contents filename)
    (buffer-string)))
#+end_src
* MacOS exclusive configurations
#+begin_src elisp
(when IS-MAC (setq mac-option-key-is-meta t)
      (setq mac-right-option-modifier nil))
#+end_src
* Personal Information
#+begin_src elisp
(setq user-full-name "Olav Fosse"
      user-mail-address "fosseolav@gmail.com")
#+end_src
* Emacs Radio
This is a radio program I've written. I'm planning to package and publish it to Melpa some time. For now it lives in my configuration.
#+begin_src elisp
; should be defvar when packaged
(setq er-channels '(("def con | soma fm" . "http://somafm.com/defcon256.pls")
                    ("cyberia | lainon". "http://lainon.life:8000/cyberia.ogg")
                    ("cafe | lainon" . "http://lainon.life:8000/cafe.ogg")
                    ("swing | lainon" . "http://lainon.life:8000/swing.ogg")
                    ("everything | lainon" . "http://lainon.life:8000/everything.ogg")
                    ("metal | soma fm" . "http://somafm.com/metal130.pls")
                    ("groove salad | soma fm" . "http://somafm.com/groovesalad256.pls")
                    ("secret agent | soma fm" . "http://www.somafm.com/secretagent.pls")
                    ("ryno the bearded" . "http://stream.ryno.cc/oo")
                    ("jamendo lounge" . "http://streaming.radionomy.com/JamendoLounge") ; Great music, but the songs repeat themselfs frequently
                    ))

(defun er-alist-keys (alist) (mapcar 'car alist))

(defun er-stop () (interactive) (when (boundp 'radio-process) (delete-process radio-process)))

(defun er-play-low-level (url) (setq radio-process (start-process "emacs-radio" nil "vlc" "--no-video" "-I" "rc" url)))

(defun er-get-url ()
  (setq er-channel (completing-read
                       "Channel: "
                       (er-alist-keys er-channels)
                       nil nil))
  (or (cdr (assoc er-channel er-channels)) er-channel))

(defun er-play ()
  (interactive)
  (setq url (er-get-url))
  (er-stop)
  (er-play-low-level url))

(map! :leader (:prefix ("r" . "radio") :desc "Play radio" "p" 'er-play))
(map! :leader (:prefix ("r" . "radio") :desc "Stop radio" "s" 'er-stop))
#+end_src
* Projectile
I like how doom handles projects out of the box
#+begin_src elisp
(setq projectile-project-search-path '("~/code/"))
#+end_src
Unfortunately adding ~/.doom.d, ~/org and ~/roam to the search path did not work as expected. Therefore I have to add them manually.
* Org
** Better defaults
This makes it possible to use <s to insert a code block
#+begin_src elisp
(require 'org-tempo)
#+end_src
** Non-linear notetaking
The primary purpose of note-taking should not be for storing ideas, but for developing them. When we take notes, we should ask: â€œIn what context do I want to see this note again?" - somebody

I use org-roam to take notes in a graph(network). The way it works is that whenever you link to a note from another note an edge(connection) is created between the two. org-roam provides easy between nodes through their edges. This is useful because it allows me to build useful connections between my notes regardless of which topic(s) they belong to. I was inspired by the zettelkasten method although I don't strictly follow it.
#+begin_src elisp
(setq org-roam-directory "~/roam")
(setq org-roam-index-file "index.org")
#+end_src
[[file:roam_illustration.svg][An org-roam graph]]
** Linear notetakin
I also use org-mode for organizing knowledge that is more linear in nature. Among other things I manage todos, project ideas, quotes, reading lists, song lists, my calendar, gift ideas, wishlist and youtube scripts all in org-mode.

In addition to that i track my habits in org using org-habits.
#+begin_src elisp
(require 'org-habit)
#+end_src
* Competitive programming
I do competitive programming in cpp and for that I rely heavily on my snippets. All of them are hand written by me and only intended for my specific competitive programming workflow.
#+begin_src elisp
(set-file-template! 'c++-mode :trigger "template")
(setq yas--default-user-snippets-dir "~/.doom.d/snippets")
#+end_src

I use c++11 for all my competitive programming and that is all I use cpp for so always using c++11 linting is sufficient for me.
#+begin_src elisp
(add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++11")))
#+end_src

I also use these functions for quickly compiling, running and testing cpp programs.
#+begin_src elisp
(defun comp-open-buffer (buffer &optional switch-window)
      (setq temp kill-buffer-query-functions)
      (setq kill-buffer-query-functions nil)
      (+popup/close-all)
      (+popup-buffer buffer)
      (setq kill-buffer-query-functions temp)
      (when switch-window (switch-to-buffer-other-window buffer))
      )

(defun comp-compile () (interactive)
       (setq temp compilation-read-command)
       (setq compilation-read-command nil)
       (comp-open-buffer (compile (concat "g++ \"" buffer-file-name "\" --std=c++11 -o /tmp/comp-a.out")))
       (setq compilation-read-command temp)
       )

(defun comp-run () (interactive)
       (comp-open-buffer (make-comint "comp-run" "/tmp/comp-a.out")) t)

(defun comp-test () (interactive)
       (setq buffer (current-buffer))
       (comp-open-buffer (make-comint "comp-test" "/tmp/comp-a.out") t)
       (setq y (clipboard-yank))
       (insert (if (eq y nil) "" y)
               (comint-send-input nil nil))
       (other-window)
       )

(map! :leader (:prefix ("k" . "competitive") :desc "Comp compile" "c" 'comp-compile))
(map! :leader (:prefix ("k" . "competitive") :desc "Comp run" "r" 'comp-run))
(map! :leader (:prefix ("k" . "competitive") :desc "Comp test" "t" 'comp-test))
#+end_src
* IRC
At the moment I only use circe for trigex's irc server. For freenode I use Matrix. I will probably move to using circe sooner or later once I get bouncing set up for that.
Inlining images plus 1000 line znc history lead to unbearable loading times. Therefore these are commented out.
#+begin_src elisp
;(require 'circe-display-images)
;(enable-circe-display-images)
#+end_src
#+begin_src elisp
(map! :leader (:prefix ("o" . "+open") :desc "IRC" "i" '=irc))
(after! circe
  (set-irc-server! "trigex.moe-znc"
                   `(:host "znc.trigex.moe"
                     :port 5597
                     :user "fossegrim/trigex"
                     :nick "fossegrim"
                     :realname "fossegrim"
                     :pass (lambda (&rest _) (get-string-from "~/.znc")) ; relax it's randomly generated, not used anywhere else and my disk is encrypted
                     :channels ("#clan" "#img-dump" "#sethhateclub" "#bunker"))))

(when nil (set-irc-server! "chat.freenode.net"
                   `(:tls t
                     :port 6697
                     :nick "fossegrim"
                     :sasl-username "fossegrim"
                     :sasl-password (lambda (&rest _) (get-string-from "~/.freenode")) ; relax it's randomly generated, not used anywhere else and my disk is encrypted
                     :channels ("#emacs" "#haskell" "##c++"))))
#+end_src
* RSS
#+begin_src elisp
(setq elfeed-feeds
      '("http://fossegr.im/feed.xml" "https://www.youtube.com/feeds/videos.xml?channel_id=UCWQ1f0ZhD-qhJB3AfJEoW0w"))

#+end_src
* Startup
I would like my workspace workflow to be one where I have a *IRC*, *RSS*, ~/org/, ~/roam/ and ~/doom/ have a constant S-(1-5) and I use SPC p p to switch to project workspaces. To get this workflow I tried making doom open some workspaces with each of these tasks at startup although I couldn't get any of this to work.
